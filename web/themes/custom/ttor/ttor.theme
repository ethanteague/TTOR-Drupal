<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function ttor_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];

  $form['fonts']['fonts']['bootstrap_barrio_google_fonts']['#options']['poppins'] = 'Roboto, Poppins';
}

/**
 * Sets the font for Poppins.
 */
function ttor_preprocess_page(&$variables) {
  $fonts = theme_get_setting('bootstrap_barrio_google_fonts');
  if ($fonts) {
    $variables['#attached']['library'][] = (in_array($fonts, ['poppins']) ? 'ttor' : 'bootstrap_barrio') . '/' . $fonts;
  }
  // Check if Node variable is available and if its a Node or string.
  if (isset($variables['node'])) {
    if ($variables['node']) {
      $nid = ($variables['node'] instanceof NodeInterface) ? $variables['node']->id() : $variables['node'];
    }
    if ($nid) {
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);
      if ($alias == '/public/channels') {
        $variables['#attached']['library'][] = 'ttor/channels';
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ttor_views_pre_render(ViewExecutable $view) {

  if ($view->id() == 'carousel') {
    if ($view->current_display == 'front_page_news_page') {
      if (count($view->result) == 1) {
        $view->setTitle($view->result[0]->_entity->getTitle());
      }
      $cids = $view->getCacheTags();
      \Drupal::service('cache.render')->invalidateAll($cids);
    }
  }

  // Fixes cache issue with display id suggestion templates.
  if ($view->id() == 'multicounty_litigation') {
    $cids = $view->getCacheTags();
    \Drupal::service('cache.render')->invalidateAll($cids);
  }

  // If we have a typo, or a lookup that isn't a term, send to 404.
  if ($view->id() === 'courts') {
    $term_arg = $view->args[0];
    $term_processed = str_replace('-', '/', ucwords($term_arg));
    $term_lookup = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'name' => $term_processed,
        'vid' => 'state_vicinage_county',
      ]);
    /** @var \Drupal\taxonomy\Entity\Term $term_raw */
    $term = empty($term_lookup) ? FALSE : TRUE;
    if (!$term) {
      $redirect = new RedirectResponse('/404');
      $redirect->send();
    }
  }
}

/**
 * Implements preprocess_page_title().
 */
function ttor_preprocess_page_title(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function ttor_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Used to add the current language selection to media.
 */
function ttor_preprocess_media(&$vars) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $vars['lang'] = $language;
  if ($vars['view_mode'] == 'linked_document') {
    if ($vars['elements']['#media']->field_document->entity) {
      $file = $vars['elements']['#media']->field_document->entity;
      $file->setFilename($vars['name']);
    }
    elseif ($vars['elements']['#media']->field_media_file->entity) {
      $file = $vars['elements']['#media']->field_media_file->entity;
      $file->setFilename($vars['name']);

    }
  }
}

/**
 * Used to add the current language selection to node.
 */
function ttor_preprocess_node(&$vars) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $vars['lang'] = $language;
  if ($vars['node']->type->entity->get('type') === 'events') {
    // Grab the transition start and end dates.
    foreach ($vars['node']->scheduled_transition_state as $key => $transition) {
      if ($transition->value === 'event_start') {
        $vars['event_state_date_scheduled'] = $vars['node']->scheduled_transition_date[$key]->value;
      }
      if ($transition->value === 'event_end') {
        $vars['event_end_date_scheduled'] = $vars['node']->scheduled_transition_date[$key]->value;
      }
    }
  }
}

/**
 * Implements hook_tabs_preprocess_tb_megamenu_item().
 */
function ttor_tabs_preprocess_tb_megamenu_item(array &$vars) {
  $link = $vars['item']->link;
  $uuid = $link->getDerivativeId();
  $entity = \Drupal::service('entity.repository')->loadEntityByUuid('menu_link_content', $uuid);
  $vars['is_hidden'] = $entity->field_hide_on_mega_menu->value;
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function ttor_theme_suggestions_page_alter(&$suggestions, $variables, $hook) {
  // 403 & 404 template suggestion.
  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
    switch ($status_code) {
      case 403:
      case 404:
        $suggestions[] = 'page__400';
        break;

      default:
        break;
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ttor_preprocess_block(&$variables) {
  if ('page_title_block' === $variables['plugin_id']) {
    $node = \Drupal::request()->attributes->get('node');

    if (!empty($node->type->entity) && $node->type->entity->get('type') === "rules_of_court") {
      if ($node->field_id->value) {
        $variables['content']['#title'] = t('RULE') . ' ' . $node->field_id->value . ' - ' . $node->title->value;
      }
    }
  }
  if ($variables['elements']['#plugin_id'] === 'mcl_by_county') {
    $variables['#attached']['library'][] = 'ttor_views/ttor-views-condensed-table';
    $variables['#attached']['library'][] = 'ttor_views/ttor-mcl';
  }
}
